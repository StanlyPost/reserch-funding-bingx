import requests
import logging
import schedule
import time
from datetime import datetime, timedelta
from config import TELEGRAM_TOKEN, TELEGRAM_CHANNEL_ID, HEADERS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

def get_funding_rates():
    """–ü–æ–ª—É—á–∞–µ—Ç funding rates —Å –±–∏—Ä–∂–∏ BingX"""
    url = "https://open-api.bingx.com/openApi/swap/v2/quote/premiumIndex"
    try:
        response = requests.get(url, headers=HEADERS)
        response.raise_for_status()
        data = response.json()
        return data.get("data", [])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def format_funding_message(tokens, timestamp_utc):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram"""
    if not tokens:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è."

    formatted_tokens = []
    for item in tokens:
        symbol = item["symbol"]
        rate = float(item["fundingRate"]) * 100
        formatted_tokens.append(f"{symbol}: {rate:.4f}%")

    message = (
        f"üí∞ –¢–û–ü 5 –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö funding rate –Ω–∞ {timestamp_utc.strftime('%Y-%m-%d %H:%M UTC')}:\n\n"
        + "\n".join(formatted_tokens)
    )
    return message

def send_telegram_message(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHANNEL_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

def job():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞"""
    logging.info("‚è± –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è...")
    all_tokens = get_funding_rates()
    if not all_tokens:
        logging.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ 0 —Ç–æ–∫–µ–Ω–æ–≤.")
        return

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ fundingRate –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    sorted_tokens = sorted(all_tokens, key=lambda x: float(x["fundingRate"]))
    top_5 = sorted_tokens[:5]

    utc_now = datetime.utcnow()
    message = format_funding_message(top_5, utc_now)
    send_telegram_message(message)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞ (–≤ 50 –º–∏–Ω—É—Ç –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞)
schedule.every().hour.at(":50").do(job)

if __name__ == "__main__":
    logging.info("üöÄ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç")
    print("üöÄ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç")

    while True:
        schedule.run_pending()
        time.sleep(1)
